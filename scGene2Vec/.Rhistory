class(pbmc@assays$RNA@counts)
gene_attr <- data.frame(mean = rowMeans(pbmc@assays$RNA@counts),
detection_rate = rowMeans(pbmc@assays$RNA@counts > 0),
var = apply(pbmc@assays$RNA@counts, 1, var))
gene_attr$log_mean <- log10(gene_attr$mean)
gene_attr$log_var <- log10(gene_attr$var)
rownames(gene_attr) <- rownames(pbmc@assays$RNA@counts)
cell_attr <- data.frame(n_umi = colSums(pbmc@assays$RNA@counts),
n_gene = colSums(pbmc@assays$RNA@counts > 0))
rownames(cell_attr) <- colnames(pbmc@assays$RNA@counts)
cell_attr$orig.ident <- pbmc@meta.data$orig.ident
test <- scttransform::vst(pbmc@assays$RNA@counts, verbose=FALSE, batch_var = 'orig.ident')
test <- sctransform::vst(pbmc@assays$RNA@counts, verbose=FALSE, batch_var = 'orig.ident')
rm gene_attr
rm(gene_attr)
rm(cell_attr)
gene_attr <- data.frame(mean = rowMeans(pbmc@assays$RNA@counts),
detection_rate = rowMeans(pbmc@assays$RNA@counts > 0),
var = apply(pbmc@assays$RNA@counts, 1, var))
gene_attr$log_mean <- log10(gene_attr$mean)
gene_attr$log_var <- log10(gene_attr$var)
rownames(gene_attr) <- rownames(pbmc@assays$RNA@counts)
cell_attr$gene <- Matrix::colSums(pbmc@assays$RNA@counts > 0)
gene_attr <- data.frame(mean = rowMeans(pbmc@assays$RNA@counts),
detection_rate = rowMeans(pbmc@assays$RNA@counts > 0),
var = apply(pbmc@assays$RNA@counts, 1, var))
gene_attr$log_mean <- log10(gene_attr$mean)
gene_attr$log_var <- log10(gene_attr$var)
rownames(gene_attr) <- rownames(pbmc@assays$RNA@counts)
cell_attr <- data.frame(gene = Matrix::colSums(pbmc@assays$RNA@counts > 0),
umi =  as.integer(Matrix::colSums(pbmc@assays$RNA@counts)))
cell_attr$log_umi <- log10(cell_attr$umi)
cell_attr$umi_per_gene <- cell_attr$umi / cell_attr$gene
cell_attr$log_umi_per_gene <- log10(cell_attr$umi_per_gene)
rownames(cell_attr) <- colnames(pbmc@assays$RNA@counts)
cell_attr$orig.ident <- pbmc@meta.data$orig.ident
test <- sctransform::vst(pbmc@assays$RNA@counts, verbose=FALSE, cell_attr = cell_attr, latent_var = 'log_umi_per_gene', batch_var = 'orig.ident')
gene_attr <- data.frame(mean = rowMeans(pbmc@assays$RNA@counts),
detection_rate = rowMeans(pbmc@assays$RNA@counts > 0),
var = apply(pbmc@assays$RNA@counts, 1, var))
gene_attr$log_mean <- log10(gene_attr$mean)
gene_attr$log_var <- log10(gene_attr$var)
rownames(gene_attr) <- rownames(pbmc@assays$RNA@counts)
cell_attr <- data.frame(gene = Matrix::colSums(pbmc@assays$RNA@counts > 0),
umi =  as.integer(Matrix::colSums(pbmc@assays$RNA@counts)))
cell_attr$log_umi <- log10(cell_attr$umi)
cell_attr$umi_per_gene <- cell_attr$umi / cell_attr$gene
cell_attr$log_umi_per_gene <- log10(cell_attr$umi_per_gene)
rownames(cell_attr) <- colnames(pbmc@assays$RNA@counts)
cell_attr$orig.ident <- as.factor(pbmc@meta.data$orig.ident)
test <- sctransform::vst(pbmc@assays$RNA@counts, verbose=FALSE, cell_attr = cell_attr, latent_var = 'log_umi_per_gene', batch_var = 'orig.ident')
test <- sctransform::vst(pbmc@assays$RNA@counts, verbose=FALSE, cell_attr = cell_attr, latent_var = 'log_umi_per_gene', batch_var = 'orig.ident')
?grep
library('Matrix')
library('ggplot2')
library('reshape2')
library('sctransform')
library('knitr')
knit_hooks$set(optipng = hook_optipng)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
digits = 2,
tidy = TRUE,
tidy.opts = list(width.cutoff=80),
optipng = '-o 5 -strip all -quiet',
fig.width=4, fig.height=2.5, dpi=100, out.width = '70%'
)
old_theme <- theme_set(theme_classic(base_size=8))
#pbmc_data <- Read10X("~/Downloads/filtered_gene_bc_matrices/hg19/")
#library(Seurat)
vehicle <- Load10X_Spatial('~/Downloads/all_spots-selected/25D_DBP/outs','filtered_feature_bc_matrix.h5',use.names = TRUE)
library(SeuratObject)
library(Seurat)
#pbmc_data <- Read10X("~/Downloads/filtered_gene_bc_matrices/hg19/")
#library(Seurat)
vehicle <- Load10X_Spatial('~/Downloads/all_spots-selected/25D_DBP/outs','filtered_feature_bc_matrix.h5',use.names = TRUE)
pbmc_data = vehicle@assays$Spatial@counts
class(pbmc_data)
dim(pbmc_data)
gene_attr <- data.frame(mean = rowMeans(pbmc_data),
detection_rate = rowMeans(pbmc_data > 0),
var = apply(pbmc_data, 1, var))
gene_attr$log_mean <- log10(gene_attr$mean)
gene_attr$log_var <- log10(gene_attr$var)
rownames(gene_attr) <- rownames(pbmc_data)
cell_attr <- data.frame(n_umi = colSums(pbmc_data),
n_gene = colSums(pbmc_data > 0))
rownames(cell_attr) <- colnames(pbmc_data)
set.seed(44)
vst_out <- sctransform::vst(pbmc_data, latent_var = c('log_umi'), return_gene_attr = TRUE, return_cell_attr = TRUE, verbosity = 1)
sctransform::plot_model_pars(vst_out, show_theta = TRUE)
View(vst_out)
colnames(vst_out$gene_attr)
dim(vst_out$y)
gene_corr_list=vector()
for (i in seq(1,14780,1)){
gene_corr_list = append(gene_corr_list, cor(vst_out$y[i,],vst_out$cell_attr$umi))
}
vst_out$gene_attr$corr_with_umi <- gene_corr_list
ggplot(vst_out$gene_attr, aes(x=gmean, y=corr_with_umi))+ geom_point(alpha=0.3, shape=16)
rm(list=ls())
BiocManager::install("SingleCellExperiment")
install.packages("devtools")
devtools::install_github("linxihui/NNLM")
devtools::install_github(
"jbergenstrahle/STUtility"
)
remotes::install_github("ChristophH/sctransform@develop")
library(Seurat)
pbmc_data <- Read10X("~/Downloads/filtered_gene_bc_matrices/hg19/")
pbmc_data_2 <- pbmc_data
#introduce systemic batch effect by adding 100 to all umi counts
pbmc_data_2@x <- pbmc_data_2@x + 2
pbmc <- CreateSeuratObject(pbmc_data, project = "pbmc")
pbmc_2 <- CreateSeuratObject(pbmc_data_2, project = 'pbmc_2')
pbmc <- merge(pbmc, pbmc_2, add.cell.ids=c('pbmc','pbmc_2'))
VlnPlot(pbmc,'nCount_RNA', split.by="orig.ident")
pbmc <- SCTransform(pbmc, verbose=FALSE)
pbmc <- RunPCA(pbmc, assay = "SCT", verbose = FALSE)
pbmc <- FindNeighbors(pbmc, reduction = "pca", dims = 1:20, verbose = FALSE)
pbmc <- RunUMAP(pbmc, reduction = "pca", dims = 1:20, verbose = FALSE)
DimPlot(pbmc, reduction = "umap", group.by="orig.ident")
pbmc <- SCTransform(pbmc, vars.to.regress = "orig.ident", verbose=FALSE)
pbmc <- RunPCA(pbmc, assay = "SCT", verbose = FALSE)
pbmc <- FindNeighbors(pbmc, reduction = "pca", dims = 1:20, verbose = FALSE)
pbmc <- RunUMAP(pbmc, reduction = "pca", dims = 1:20, verbose = FALSE)
DimPlot(pbmc, reduction = "umap", group.by="orig.ident")
gene_attr <- data.frame(mean = rowMeans(pbmc@assays$RNA@counts),
detection_rate = rowMeans(pbmc@assays$RNA@counts > 0),
var = apply(pbmc@assays$RNA@counts, 1, var))
gene_attr$log_mean <- log10(gene_attr$mean)
gene_attr$log_var <- log10(gene_attr$var)
rownames(gene_attr) <- rownames(pbmc@assays$RNA@counts)
cell_attr <- data.frame(gene = Matrix::colSums(pbmc@assays$RNA@counts > 0),
umi =  as.integer(Matrix::colSums(pbmc@assays$RNA@counts)))
cell_attr$log_umi <- log10(cell_attr$umi)
cell_attr$umi_per_gene <- cell_attr$umi / cell_attr$gene
cell_attr$log_umi_per_gene <- log10(cell_attr$umi_per_gene)
rownames(cell_attr) <- colnames(pbmc@assays$RNA@counts)
cell_attr$orig.ident <- as.factor(pbmc@meta.data$orig.ident)
library(sctransform)
pbmc <- SCTransform(pbmc, batch_var = "orig.ident", verbose=FALSE)
rm(list=ls()
)
rm(list=ls())
detach(package:SeuratObject, unload=T)
library(Seurat)
pbmc_data <- Read10X("~/Downloads/filtered_gene_bc_matrices/hg19/")
pbmc_data_2 <- pbmc_data
#introduce systemic batch effect by adding 100 to all umi counts
pbmc_data_2@x <- pbmc_data_2@x + 2
pbmc <- SCTransform(pbmc, batch_var = "orig.ident", verbose=FALSE)
pbmc <- CreateSeuratObject(pbmc_data, project = "pbmc")
pbmc_2 <- CreateSeuratObject(pbmc_data_2, project = 'pbmc_2')
pbmc <- merge(pbmc, pbmc_2, add.cell.ids=c('pbmc','pbmc_2'))
pbmc <- SCTransform(pbmc, batch_var = "orig.ident", verbose=FALSE)
pbmc <- RunPCA(pbmc, assay = "SCT", verbose = FALSE)
pbmc <- FindNeighbors(pbmc, reduction = "pca", dims = 1:20, verbose = FALSE)
pbmc <- RunUMAP(pbmc, reduction = "pca", dims = 1:20, verbose = FALSE)
DimPlot(pbmc, reduction = "umap", group.by="orig.ident")
cluster_0_DE <- FindMarkers(allcells, ident.1 = "pbmc",
group.by = "orig.ident", verbose = TRUE,
subset.ident = 0,
assay = "SCT", slot = "data",
min.pct = 0.25, logfc.threshold = 0.25)
cluster_0_DE <- FindMarkers(pbmc, ident.1 = "pbmc",
group.by = "orig.ident", verbose = TRUE,
subset.ident = 0,
assay = "SCT", slot = "data",
min.pct = 0.25, logfc.threshold = 0.25)
batch_var_DE <- FindMarkers(pbmc, ident.1 = "pbmc",
group.by = "orig.ident", verbose = TRUE,
assay = "SCT", slot = "data",
min.pct = 0.25, logfc.threshold = 0.25)
batch_var_DE
batch_var_DE <- FindMarkers(pbmc, ident.1 = "pbmc",
group.by = "orig.ident", verbose = TRUE,
assay = "SCT", slot = "data",
min.pct = 0.25, logfc.threshold = 0.25)
batch_var_DE
VlnPlot(pbmc, 'RPL10', group.by='orig.ident')
pbmc <- SCTransform(pbmc, vars.to.regress = "orig.ident", verbose=FALSE)
pbmc <- RunPCA(pbmc, assay = "SCT", verbose = FALSE)
pbmc <- FindNeighbors(pbmc, reduction = "pca", dims = 1:20, verbose = FALSE)
pbmc <- RunUMAP(pbmc, reduction = "pca", dims = 1:20, verbose = FALSE)
DimPlot(pbmc, reduction = "umap", group.by="orig.ident")
regress_out_DE <- FindMarkers(pbmc, ident.1 = "pbmc",
group.by = "orig.ident", verbose = TRUE,
assay = "SCT", slot = "data",
min.pct = 0.25, logfc.threshold = 0.25)
regress_out_DE
VlnPlot(pbmc, 'RPL10', group.by='orig.ident')
pbmc <- SCTransform(pbmc, batch_var = "orig.ident", verbose=FALSE)
pbmc <- RunPCA(pbmc, assay = "SCT", verbose = FALSE)
pbmc <- FindNeighbors(pbmc, reduction = "pca", dims = 1:20, verbose = FALSE)
pbmc <- RunUMAP(pbmc, reduction = "pca", dims = 1:20, verbose = FALSE)
DimPlot(pbmc, reduction = "umap", group.by="orig.ident")
VlnPlot(pbmc, 'RPL10', group.by='orig.ident')
pbmc <- SCTransform(pbmc, batch_var = "orig.ident", vars.to.regress = "orig.ident", verbose=FALSE)
pbmc <- RunPCA(pbmc, assay = "SCT", verbose = FALSE)
pbmc <- FindNeighbors(pbmc, reduction = "pca", dims = 1:20, verbose = FALSE)
pbmc <- RunUMAP(pbmc, reduction = "pca", dims = 1:20, verbose = FALSE)
DimPlot(pbmc, reduction = "umap", group.by="orig.ident")
both_DE <- FindMarkers(pbmc, ident.1 = "pbmc",
group.by = "orig.ident", verbose = TRUE,
assay = "SCT", slot = "data",
min.pct = 0.25, logfc.threshold = 0.25)
both_DE
pbmc <- RunPCA(pbmc, assay = "RNA", verbose = FALSE)
?FindVariableFeatures
FindVariableFeatures(pbmc)
pbmc <- RunPCA(pbmc, assay = "RNA", verbose = FALSE)
FindVariableFeatures(pbmc, assay="RNA")
pbmc <- RunPCA(pbmc, assay = "RNA", verbose = FALSE)
rm(list=ls())
library(Seurat)
pbmc_data <- Read10X("~/Downloads/filtered_gene_bc_matrices/hg19/")
pbmc_data_2 <- pbmc_data
#introduce systemic batch effect by adding 100 to all umi counts
pbmc_data_2@x <- pbmc_data_2@x + 2
pbmc <- CreateSeuratObject(pbmc_data, project = "pbmc")
pbmc_2 <- CreateSeuratObject(pbmc_data_2, project = 'pbmc_2')
pbmc <- merge(pbmc, pbmc_2, add.cell.ids=c('pbmc','pbmc_2'))
FindVariableFeatures(pbmc, assay="RNA")
pbmc <- RunPCA(pbmc, assay = "RNA", verbose = FALSE)
pbmc <- FindVariableFeatures(pbmc, assay="RNA")
pbmc <- RunPCA(pbmc, assay = "RNA", verbose = FALSE)
pbmc <- FindVariableFeatures(pbmc, assay="RNA")
pbmc <- ScaleData(pbmc)
pbmc <- RunPCA(pbmc, assay = "RNA", verbose = FALSE)
pbmc <- FindNeighbors(pbmc, reduction = "pca", dims = 1:20, verbose = FALSE)
pbmc <- RunUMAP(pbmc, reduction = "pca", dims = 1:20, verbose = FALSE)
DimPlot(pbmc, reduction = "umap", group.by="orig.ident")
pbmc <- ScaleData(pbmc)
pbmc <- FindVariableFeatures(pbmc, assay="RNA")
pbmc <- RunPCA(pbmc, assay = "RNA", verbose = FALSE)
pbmc <- FindNeighbors(pbmc, reduction = "pca", dims = 1:20, verbose = FALSE)
pbmc <- RunUMAP(pbmc, reduction = "pca", dims = 1:20, verbose = FALSE)
DimPlot(pbmc, reduction = "umap", group.by="orig.ident")
ElbowPlot(pbmc)
ElbowPlot(pbmc)
ElbowPlot(pbmc)
pbmc <- FindNeighbors(pbmc, reduction = "pca", dims = 1:7, verbose = FALSE)
pbmc <- RunUMAP(pbmc, reduction = "pca", dims = 1:7, verbose = FALSE)
DimPlot(pbmc, reduction = "umap", group.by="orig.ident")
VizDimLoadings(pbmc)
rm(list=ls())
library('Matrix')
library('ggplot2')
library('reshape2')
library('sctransform')
library('knitr')
knit_hooks$set(optipng = hook_optipng)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
digits = 2,
tidy = TRUE,
tidy.opts = list(width.cutoff=80),
optipng = '-o 5 -strip all -quiet',
fig.width=4, fig.height=2.5, dpi=100, out.width = '70%'
)
old_theme <- theme_set(theme_classic(base_size=8))
#pbmc_data <- Read10X("~/Downloads/filtered_gene_bc_matrices/hg19/")
library(Seurat)
vehicle <- Load10X_Spatial('~/Downloads/all_spots-selected/25D_DBP/outs','filtered_feature_bc_matrix.h5',use.names = TRUE)
pbmc_data = vehicle@assays$Spatial@counts
class(pbmc_data)
dim(pbmc_data)
gene_attr <- data.frame(mean = rowMeans(pbmc_data),
detection_rate = rowMeans(pbmc_data > 0),
var = apply(pbmc_data, 1, var))
gene_attr$log_mean <- log10(gene_attr$mean)
gene_attr$log_var <- log10(gene_attr$var)
rownames(gene_attr) <- rownames(pbmc_data)
cell_attr <- data.frame(n_umi = colSums(pbmc_data),
n_gene = colSums(pbmc_data > 0))
rownames(cell_attr) <- colnames(pbmc_data)
ggplot(gene_attr, aes(log_mean, log_var)) +
geom_point(alpha=0.3, shape=16) +
geom_density_2d(size = 0.3) +
geom_abline(intercept = 0, slope = 1, color='red')
vehicle <- Load10X_Spatial('~/Downloads/all_spots-selected/Al/','filtered_feature_bc_matrix.h5',use.names = TRUE)
vehicle <- Load10X_Spatial('~/Downloads/all_spots-selected/Al','filtered_feature_bc_matrix.h5',use.names = TRUE)
vehicle <- Load10X_Spatial('~/Downloads/all_spots-selected/Al/outs','filtered_feature_bc_matrix.h5',use.names = TRUE)
pbmc_data = vehicle@assays$Spatial@counts
class(pbmc_data)
dim(pbmc_data)
set.seed(44)
vst_out <- sctransform::vst(pbmc_data, latent_var = c('log_umi'), return_gene_attr = TRUE, return_cell_attr = TRUE, verbosity = 1)
sctransform::plot_model_pars(vst_out, show_theta = TRUE)
vehicle <- Load10X_Spatial('~/Downloads/all_spots-selected/25D/outs','filtered_feature_bc_matrix.h5',use.names = TRUE)
pbmc_data = vehicle@assays$Spatial@counts
class(pbmc_data)
dim(pbmc_data)
set.seed(44)
vst_out <- sctransform::vst(pbmc_data, latent_var = c('log_umi'), return_gene_attr = TRUE, return_cell_attr = TRUE, verbosity = 1)
sctransform::plot_model_pars(vst_out, show_theta = TRUE)
vehicle <- Load10X_Spatial('all_spots-selected/Al/outs','filtered_feature_bc_matrix.h5',use.names = TRUE)
vehicle <- Load10X_Spatial('~/Downloads/all_spots-selected/Al/outs','filtered_feature_bc_matrix.h5',use.names = TRUE)
D25 <- Load10X_Spatial('~/Downloads/all_spots-selected/25D/outs','filtered_feature_bc_matrix.h5',use.names = TRUE)
D25DBP <- Load10X_Spatial('~/Downloads/all_spots-selected/25D_DBP/outs','filtered_feature_bc_matrix.h5',use.names = TRUE)
vehicle <- merge(vehicle,c(D25,D25DBP),
add.cell.ids = c("vehicle", "D25","D25DBP"),
project = "visium")
pbmc_data = vehicle@assays$Spatial@counts
class(pbmc_data)
dim(pbmc_data)
set.seed(44)
vst_out <- sctransform::vst(pbmc_data, latent_var = c('log_umi'), return_gene_attr = TRUE, return_cell_attr = TRUE, verbosity = 1)
sctransform::plot_model_pars(vst_out, show_theta = TRUE)
sctransform::plot_model(vst_out, pbmc_data, c('MALAT1', 'MSMB', 'ACP3', 'AL158835.1'), plot_residual = TRUE)
sctransform::plot_model(vst_out, pbmc_data, c('EEF1A1','ACP3'), plot_residual = TRUE, show_nr = TRUE,arrange_vertical = FALSE)
#EEF1A1 had a fitted theta over 40 and ACP had one of about 4, in the regularized both are about 10
sctransform::plot_model(vst_out, pbmc_data, c('RPS27','HSPA6'), plot_residual = TRUE, show_nr = TRUE,arrange_vertical = FALSE)
#same as above situation - the SCT increases variance for genes that have biological relevance and lowers it for ones that are housekeepers. Since the housekeepers have less overdispersion than expected (fitted) and the biological relevant ones have more overdispersion than expected
sctransform::plot_model(vst_out, pbmc_data, c('KRT8', 'KLK3', 'IGKC', 'TP63'), plot_residual = TRUE, show_nr = TRUE)
ggplot(vst_out$gene_attr, aes(residual_mean)) + geom_histogram(binwidth=0.01)
ggplot(vst_out$gene_attr, aes(residual_variance)) + geom_histogram(binwidth=0.1) + geom_vline(xintercept=1, color='red') + xlim(0, 10)
ggplot(vst_out$gene_attr, aes(log10(gmean), residual_variance)) + geom_point(alpha=0.3, shape=16) +
geom_density_2d(size = 0.3)
gene_corr_list=vector()
for (i in seq(1,13929,1)){
gene_corr_list = append(gene_corr_list, cor(vst_out$y[i,],vst_out$cell_attr$umi))
}
vst_out$gene_attr$corr_with_umi <- gene_corr_list
gene_corr_list=vector()
for (i in seq(1,16117,1)){
gene_corr_list = append(gene_corr_list, cor(vst_out$y[i,],vst_out$cell_attr$umi))
}
vst_out$gene_attr$corr_with_umi <- gene_corr_list
ggplot(vst_out$gene_attr, aes(x=gmean, y=corr_with_umi))+ geom_point(alpha=0.3, shape=16)
head(round(vst_out$gene_attr[order(-vst_out$gene_attr$residual_variance), ], 2), 100)
head(round(gene_attr[order(-gene_attr$var), ], 2), 100)
?vst
vehicle <- Load10X_Spatial('~/Downloads/all_spots-selected/Al/outs','filtered_feature_bc_matrix.h5',use.names = TRUE)
D25 <- Load10X_Spatial('~/Downloads/all_spots-selected/25D/outs','filtered_feature_bc_matrix.h5',use.names = TRUE)
D25DBP <- Load10X_Spatial('~/Downloads/all_spots-selected/25D_DBP/outs','filtered_feature_bc_matrix.h5',use.names = TRUE)
vehicle <- merge(vehicle,c(D25,D25DBP),
add.cell.ids = c("vehicle", "D25","D25DBP"),
project = "visium")
pbmc_data = vehicle@assays$Spatial@counts
class(pbmc_data)
dim(pbmc_data)
set.seed(44)
vst_out <- sctransform::vst(pbmc_data, latent_var = c('log_umi'), return_gene_attr = TRUE, return_cell_attr = TRUE, verbosity = 1, bw_adjust=10)
sctransform::plot_model_pars(vst_out, show_theta = TRUE)
sctransform::plot_model(vst_out, pbmc_data, c('MALAT1', 'MSMB', 'ACP3', 'AL158835.1'), plot_residual = TRUE)
sctransform::plot_model(vst_out, pbmc_data, c('EEF1A1','ACP3'), plot_residual = TRUE, show_nr = TRUE,arrange_vertical = FALSE)
#EEF1A1 had a fitted theta over 40 and ACP had one of about 4, in the regularized both are about 10
#vehicle <- Load10X_Spatial('~/Downloads/all_spots-selected/Al/outs','filtered_feature_bc_matrix.h5',use.names = TRUE)
#D25 <- Load10X_Spatial('~/Downloads/all_spots-selected/25D/outs','filtered_feature_bc_matrix.h5',use.names = TRUE)
#D25DBP <- Load10X_Spatial('~/Downloads/all_spots-selected/25D_DBP/outs','filtered_feature_bc_matrix.h5',use.names = TRUE)
#vehicle <- merge(vehicle,c(D25,D25DBP),
add.cell.ids = c("vehicle", "D25","D25DBP"),
#vehicle <- Load10X_Spatial('~/Downloads/all_spots-selected/Al/outs','filtered_feature_bc_matrix.h5',use.names = TRUE)
#D25 <- Load10X_Spatial('~/Downloads/all_spots-selected/25D/outs','filtered_feature_bc_matrix.h5',use.names = TRUE)
#D25DBP <- Load10X_Spatial('~/Downloads/all_spots-selected/25D_DBP/outs','filtered_feature_bc_matrix.h5',use.names = TRUE)
#vehicle <- merge(vehicle,c(D25,D25DBP),
#                  add.cell.ids = c("vehicle", "D25","D25DBP"),
#                  project = "visium")
#pbmc_data = vehicle@assays$Spatial@counts
class(pbmc_data)
dim(pbmc_data)
set.seed(44)
vst_out <- sctransform::vst(pbmc_data, latent_var = c('log_umi'), return_gene_attr = TRUE, return_cell_attr = TRUE, verbosity = 1, bw_adjust=5)
sctransform::plot_model_pars(vst_out, show_theta = TRUE)
sctransform::plot_model(vst_out, pbmc_data, c('MALAT1', 'MSMB', 'ACP3', 'AL158835.1'), plot_residual = TRUE)
sctransform::plot_model(vst_out, pbmc_data, c('EEF1A1','ACP3'), plot_residual = TRUE, show_nr = TRUE,arrange_vertical = FALSE)
#EEF1A1 had a fitted theta over 40 and ACP had one of about 4, in the regularized both are about 10
sctransform::plot_model(vst_out, pbmc_data, c('RPS27','HSPA6'), plot_residual = TRUE, show_nr = TRUE,arrange_vertical = FALSE)
#same as above situation - the SCT increases variance for genes that have biological relevance and lowers it for ones that are housekeepers. Since the housekeepers have less overdispersion than expected (fitted) and the biological relevant ones have more overdispersion than expected
sctransform::plot_model(vst_out, pbmc_data, c('KRT8', 'KLK3', 'IGKC', 'TP63'), plot_residual = TRUE, show_nr = TRUE)
ggplot(vst_out$gene_attr, aes(residual_mean)) + geom_histogram(binwidth=0.01)
ggplot(vst_out$gene_attr, aes(residual_variance)) + geom_histogram(binwidth=0.1) + geom_vline(xintercept=1, color='red') + xlim(0, 10)
ggplot(vst_out$gene_attr, aes(log10(gmean), residual_variance)) + geom_point(alpha=0.3, shape=16) +
geom_density_2d(size = 0.3)
head(round(vst_out$gene_attr[order(-vst_out$gene_attr$residual_variance), ], 2), 100)
gene_corr_list=vector()
for (i in seq(1,16117,1)){
gene_corr_list = append(gene_corr_list, cor(vst_out$y[i,],vst_out$cell_attr$umi))
}
vst_out$gene_attr$corr_with_umi <- gene_corr_list
ggplot(vst_out$gene_attr, aes(x=gmean, y=corr_with_umi))+ geom_point(alpha=0.3, shape=16)
#vehicle <- Load10X_Spatial('~/Downloads/all_spots-selected/Al/outs','filtered_feature_bc_matrix.h5',use.names = TRUE)
#D25 <- Load10X_Spatial('~/Downloads/all_spots-selected/25D/outs','filtered_feature_bc_matrix.h5',use.names = TRUE)
#D25DBP <- Load10X_Spatial('~/Downloads/all_spots-selected/25D_DBP/outs','filtered_feature_bc_matrix.h5',use.names = TRUE)
#vehicle <- merge(vehicle,c(D25,D25DBP),
#                  add.cell.ids = c("vehicle", "D25","D25DBP"),
#                  project = "visium")
#pbmc_data = vehicle@assays$Spatial@counts
class(pbmc_data)
dim(pbmc_data)
set.seed(44)
vst_out <- sctransform::vst(pbmc_data, latent_var = c('log_umi'), return_gene_attr = TRUE, return_cell_attr = TRUE, verbosity = 1)
sctransform::plot_model_pars(vst_out, show_theta = TRUE)
sctransform::plot_model(vst_out, pbmc_data, c('MALAT1', 'MSMB', 'ACP3', 'AL158835.1'), plot_residual = TRUE)
sctransform::plot_model(vst_out, pbmc_data, c('EEF1A1','ACP3'), plot_residual = TRUE, show_nr = TRUE,arrange_vertical = FALSE)
#EEF1A1 had a fitted theta over 40 and ACP had one of about 4, in the regularized both are about 10
sctransform::plot_model(vst_out, pbmc_data, c('RPS27','HSPA6'), plot_residual = TRUE, show_nr = TRUE,arrange_vertical = FALSE)
#same as above situation - the SCT increases variance for genes that have biological relevance and lowers it for ones that are housekeepers. Since the housekeepers have less overdispersion than expected (fitted) and the biological relevant ones have more overdispersion than expected
sctransform::plot_model(vst_out, pbmc_data, c('KRT8', 'KLK3', 'IGKC', 'TP63'), plot_residual = TRUE, show_nr = TRUE)
ggplot(vst_out$gene_attr, aes(residual_mean)) + geom_histogram(binwidth=0.01)
ggplot(vst_out$gene_attr, aes(residual_variance)) + geom_histogram(binwidth=0.1) + geom_vline(xintercept=1, color='red') + xlim(0, 10)
ggplot(vst_out$gene_attr, aes(log10(gmean), residual_variance)) + geom_point(alpha=0.3, shape=16) +
geom_density_2d(size = 0.3)
head(round(vst_out$gene_attr[order(-vst_out$gene_attr$residual_variance), ], 2), 100)
head(round(gene_attr[order(-gene_attr$var), ], 2), 100)
gene_corr_list=vector()
for (i in seq(1,16117,1)){
gene_corr_list = append(gene_corr_list, cor(vst_out$y[i,],vst_out$cell_attr$umi))
}
ggplot(vst_out$gene_attr, aes(x=gmean, y=corr_with_umi))+ geom_point(alpha=0.3, shape=16)
vst_out$gene_attr$corr_with_umi <- gene_corr_list
ggplot(vst_out$gene_attr, aes(x=gmean, y=corr_with_umi))+ geom_point(alpha=0.3, shape=16)
library(rsconnect)
rsconnect::deployApp('Documents/R files/Seurat Shiny App/')
rsconnect::deployApp('Documents/R files/Seurat Shiny App/')
devtools::install_github(
"jbergenstrahle/STUtility"
)
install.packages('spdep')
install.packages('spdep')
devtools::install_github(
"jbergenstrahle/STUtility"
)
BiocManager::install("spdep")
devtools::install_github(
"jbergenstrahle/STUtility"
)
detach("package:SeuratObject", unload = TRUE)
detach("package:SeuratObject", unload = TRUE)
devtools::install_github(
"jbergenstrahle/STUtility"
)
install.packages('spatstat')
library(spatstat)
devtools::install_github(
"jbergenstrahle/STUtility"
)
library(spatstat.sparse)
library(spatstat.utils)
namespace::spatstat
namespace:spatstat
BiocManager::install("multtest")
detach("package:spatstat", unload = TRUE)
detach("package:spatstat.core", unload = TRUE)
detach("package:spatstat.data", unload = TRUE)
detach("package:spatstat.geom", unload = TRUE)
detach("package:spatstat.linnet", unload = TRUE)
detach("package:spatstat.sparse", unload = TRUE)
detach("package:spatstat.utils", unload = TRUE)
package_url <- "https://cran.r-project.org/src/contrib/Archive/spatstat/spatstat_1.64-1.tar.gz"
install.packages(package_url, repos=NULL, type='source')
library(reticulate)
g2v <- import('scGene2Vec')
g2v <- import('scGene2Vec.scGene2Vec')
getwd()
pandas <- import('pandas')
setwd("/Users/beth/Downloads/scGene2Vec/scGene2Vec")
source_python('scGene2Vec.py')
use_condaenv("base")
g2v <- import('scGene2Vec.scGene2Vec')
g2v <- import('scGene2Vec')
g2v <- import('pandas')
g2v <- import('Pandas')
numpy <- import('numpy')
gensim <- import('gensim')
use_condaenv("base (root)")
gensim <- import('gensim')
use_condaenv("r-reticulate")
pandas <- import('pandas')
use_virtualenv("r-reticulate")
pandas <- import('pandas')
g2v <- import('scGene2Vec')
path_to_python <- "~/anaconda3/bin/python"
use_python(path_to_python)
g2v <- import('scGene2Vec')
library(reticulate)
use_virtualenv("r-reticulate")
conda_install('r-reticulate', packages = 'pandas')
conda_install('r-reticulate', packages = 'gensim')
g2v <- import('scGene2Vec')
use_condaenv("r-reticulate")
g2v <- import('scGene2Vec')
conda_install('r-reticulate', packages = 'pandas')
pandas <- import('pandas')
gensim <- import('gensim')
pandas <- import(pandas)
py_config()
path_to_python <- "~/anaconda3/bin/python"
use_python(path_to_python)
py_config()
use_condaenv("r-reticulate")
py_config()
path_to_python <- "~/usr/bin/python3"
use_python(path_to_python)
py_config()
use_condaenv(condaenv = "r-reticulate", conda = "/opt/anaconda3/bin/conda"
)
py_config()
path_to_python <- "/opt/anaconda3/bin/python"
use_python(path_to_python)
py_config()
path_to_python <- "~/opt/anaconda3/bin/python"
use_python(path_to_python)
py_config()
path_to_python <- "/opt/anaconda3/bin/python"
use_python(path_to_python)
detach("package:SeuratObject", unload = TRUE)
detach("package:reticulate", unload = TRUE)
